// Generated by gencpp from file mcr_manipulation_msgs/SphericalSamplerParameters.msg
// DO NOT EDIT!


#ifndef MCR_MANIPULATION_MSGS_MESSAGE_SPHERICALSAMPLERPARAMETERS_H
#define MCR_MANIPULATION_MSGS_MESSAGE_SPHERICALSAMPLERPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcr_common_msgs/ClosedInterval.h>
#include <mcr_common_msgs/ClosedInterval.h>
#include <mcr_common_msgs/ClosedInterval.h>
#include <mcr_common_msgs/ClosedInterval.h>
#include <mcr_common_msgs/ClosedInterval.h>

namespace mcr_manipulation_msgs
{
template <class ContainerAllocator>
struct SphericalSamplerParameters_
{
  typedef SphericalSamplerParameters_<ContainerAllocator> Type;

  SphericalSamplerParameters_()
    : height()
    , zenith()
    , azimuth()
    , yaw()
    , radial_distance()  {
    }
  SphericalSamplerParameters_(const ContainerAllocator& _alloc)
    : height(_alloc)
    , zenith(_alloc)
    , azimuth(_alloc)
    , yaw(_alloc)
    , radial_distance(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>  _height_type;
  _height_type height;

   typedef  ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>  _zenith_type;
  _zenith_type zenith;

   typedef  ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>  _azimuth_type;
  _azimuth_type azimuth;

   typedef  ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>  _yaw_type;
  _yaw_type yaw;

   typedef  ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>  _radial_distance_type;
  _radial_distance_type radial_distance;




  typedef boost::shared_ptr< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> const> ConstPtr;

}; // struct SphericalSamplerParameters_

typedef ::mcr_manipulation_msgs::SphericalSamplerParameters_<std::allocator<void> > SphericalSamplerParameters;

typedef boost::shared_ptr< ::mcr_manipulation_msgs::SphericalSamplerParameters > SphericalSamplerParametersPtr;
typedef boost::shared_ptr< ::mcr_manipulation_msgs::SphericalSamplerParameters const> SphericalSamplerParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcr_manipulation_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mcr_common_msgs': ['/home/hp/c_w/src/ciit_robotics_lab/mcr_common_msgs/msg'], 'shape_msgs': ['/opt/ros/indigo/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/indigo/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/indigo/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/indigo/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'mcr_manipulation_msgs': ['/home/hp/c_w/src/ciit_robotics_lab/mcr_manipulation_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e295ad05a99e6ffc20dfa96d32e2c6a3";
  }

  static const char* value(const ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe295ad05a99e6ffcULL;
  static const uint64_t static_value2 = 0x20dfa96d32e2c6a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcr_manipulation_msgs/SphericalSamplerParameters";
  }

  static const char* value(const ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message specifies the parameters, and constraints,\n\
# of a pose that is sampled around an object.\n\
#\n\
# A use case of this message is for generating a list of poses\n\
# of the robot's end-effector around an object's pose, for instance,\n\
# as potential (pre-)grasp poses.\n\
#\n\
# The rotations are performed about an axis of a moving frame 'M'\n\
# (e.g. the end-effector's pose). This frame 'M' has the same\n\
# position as the object but with the orientation of the 'base_link'\n\
# frame. The sampled poses start at a distance above the object, as\n\
# specified by the 'height' parameter, then the first rotation rotates\n\
# frame 'M' about Y by the angle 'zenith', then about X by the angle\n\
# 'azimuth', and finally, about Z by the angle 'yaw'. After the\n\
# rotations, an offset along the 'Z' axis of frame 'M' is defined by\n\
# the 'radial_distance'.\n\
#\n\
# height: The height with respect to the object's frame.\n\
#\n\
# zenith: The zenith angle (polar angle) in spherical coordinates\n\
#        (rotation about the Y axis).\n\
#\n\
# azimuth: The azimuth angle in spherical coordinates\n\
#           (rotation about the X axis).\n\
#\n\
# yaw: The rotation angle about the Z axis of the end effector.\n\
#\n\
# radial_distance: The distance between the object and the end effector.\n\
#\n\
# For each of these parameters there is an interval, that allows\n\
# the specified parameter to be varied up to the limits of the interval.\n\
mcr_common_msgs/ClosedInterval height\n\
mcr_common_msgs/ClosedInterval zenith\n\
mcr_common_msgs/ClosedInterval azimuth\n\
mcr_common_msgs/ClosedInterval yaw\n\
mcr_common_msgs/ClosedInterval radial_distance\n\
\n\
================================================================================\n\
MSG: mcr_common_msgs/ClosedInterval\n\
# This messages represents a closed interval\n\
# between a minimum value and a maximum value.\n\
float64 minimum\n\
float64 maximum\n\
";
  }

  static const char* value(const ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.zenith);
      stream.next(m.azimuth);
      stream.next(m.yaw);
      stream.next(m.radial_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SphericalSamplerParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcr_manipulation_msgs::SphericalSamplerParameters_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    s << std::endl;
    Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >::stream(s, indent + "  ", v.height);
    s << indent << "zenith: ";
    s << std::endl;
    Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >::stream(s, indent + "  ", v.zenith);
    s << indent << "azimuth: ";
    s << std::endl;
    Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >::stream(s, indent + "  ", v.azimuth);
    s << indent << "yaw: ";
    s << std::endl;
    Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >::stream(s, indent + "  ", v.yaw);
    s << indent << "radial_distance: ";
    s << std::endl;
    Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >::stream(s, indent + "  ", v.radial_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCR_MANIPULATION_MSGS_MESSAGE_SPHERICALSAMPLERPARAMETERS_H
