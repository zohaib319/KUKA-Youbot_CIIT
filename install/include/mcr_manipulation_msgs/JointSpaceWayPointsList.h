// Generated by gencpp from file mcr_manipulation_msgs/JointSpaceWayPointsList.msg
// DO NOT EDIT!


#ifndef MCR_MANIPULATION_MSGS_MESSAGE_JOINTSPACEWAYPOINTSLIST_H
#define MCR_MANIPULATION_MSGS_MESSAGE_JOINTSPACEWAYPOINTSLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/String.h>

namespace mcr_manipulation_msgs
{
template <class ContainerAllocator>
struct JointSpaceWayPointsList_
{
  typedef JointSpaceWayPointsList_<ContainerAllocator> Type;

  JointSpaceWayPointsList_()
    : list_of_joint_values_lists()
    , list_of_joint_positions()  {
    }
  JointSpaceWayPointsList_(const ContainerAllocator& _alloc)
    : list_of_joint_values_lists(_alloc)
    , list_of_joint_positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::Float64MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::other >  _list_of_joint_values_lists_type;
  _list_of_joint_values_lists_type list_of_joint_values_lists;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _list_of_joint_positions_type;
  _list_of_joint_positions_type list_of_joint_positions;




  typedef boost::shared_ptr< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> const> ConstPtr;

}; // struct JointSpaceWayPointsList_

typedef ::mcr_manipulation_msgs::JointSpaceWayPointsList_<std::allocator<void> > JointSpaceWayPointsList;

typedef boost::shared_ptr< ::mcr_manipulation_msgs::JointSpaceWayPointsList > JointSpaceWayPointsListPtr;
typedef boost::shared_ptr< ::mcr_manipulation_msgs::JointSpaceWayPointsList const> JointSpaceWayPointsListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcr_manipulation_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mcr_common_msgs': ['/home/hp/c_w/src/ciit_robotics_lab/mcr_common_msgs/msg'], 'shape_msgs': ['/opt/ros/indigo/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/indigo/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/indigo/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/indigo/share/octomap_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'mcr_manipulation_msgs': ['/home/hp/c_w/src/ciit_robotics_lab/mcr_manipulation_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee856daec9fc711792685fad2547394a";
  }

  static const char* value(const ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee856daec9fc7117ULL;
  static const uint64_t static_value2 = 0x92685fad2547394aULL;
};

template<class ContainerAllocator>
struct DataType< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcr_manipulation_msgs/JointSpaceWayPointsList";
  }

  static const char* value(const ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message represents the list of joint space way points.\n\
\n\
std_msgs/Float64MultiArray[] list_of_joint_values_lists\n\
std_msgs/String[] list_of_joint_positions\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float64[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding elements at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.list_of_joint_values_lists);
      stream.next(m.list_of_joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointSpaceWayPointsList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcr_manipulation_msgs::JointSpaceWayPointsList_<ContainerAllocator>& v)
  {
    s << indent << "list_of_joint_values_lists[]" << std::endl;
    for (size_t i = 0; i < v.list_of_joint_values_lists.size(); ++i)
    {
      s << indent << "  list_of_joint_values_lists[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.list_of_joint_values_lists[i]);
    }
    s << indent << "list_of_joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.list_of_joint_positions.size(); ++i)
    {
      s << indent << "  list_of_joint_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.list_of_joint_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCR_MANIPULATION_MSGS_MESSAGE_JOINTSPACEWAYPOINTSLIST_H
