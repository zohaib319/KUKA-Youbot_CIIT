// Generated by gencpp from file mcr_common_msgs/ClosedInterval.msg
// DO NOT EDIT!


#ifndef MCR_COMMON_MSGS_MESSAGE_CLOSEDINTERVAL_H
#define MCR_COMMON_MSGS_MESSAGE_CLOSEDINTERVAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcr_common_msgs
{
template <class ContainerAllocator>
struct ClosedInterval_
{
  typedef ClosedInterval_<ContainerAllocator> Type;

  ClosedInterval_()
    : minimum(0.0)
    , maximum(0.0)  {
    }
  ClosedInterval_(const ContainerAllocator& _alloc)
    : minimum(0.0)
    , maximum(0.0)  {
  (void)_alloc;
    }



   typedef double _minimum_type;
  _minimum_type minimum;

   typedef double _maximum_type;
  _maximum_type maximum;




  typedef boost::shared_ptr< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> const> ConstPtr;

}; // struct ClosedInterval_

typedef ::mcr_common_msgs::ClosedInterval_<std::allocator<void> > ClosedInterval;

typedef boost::shared_ptr< ::mcr_common_msgs::ClosedInterval > ClosedIntervalPtr;
typedef boost::shared_ptr< ::mcr_common_msgs::ClosedInterval const> ClosedIntervalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mcr_common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mcr_common_msgs': ['/home/hp/c_w/src/ciit_robotics_lab/mcr_common_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c1f9dd515a98b17a631b4ef7a53fcce";
  }

  static const char* value(const ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c1f9dd515a98b17ULL;
  static const uint64_t static_value2 = 0xa631b4ef7a53fcceULL;
};

template<class ContainerAllocator>
struct DataType< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcr_common_msgs/ClosedInterval";
  }

  static const char* value(const ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This messages represents a closed interval\n\
# between a minimum value and a maximum value.\n\
float64 minimum\n\
float64 maximum\n\
";
  }

  static const char* value(const ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.minimum);
      stream.next(m.maximum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClosedInterval_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcr_common_msgs::ClosedInterval_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcr_common_msgs::ClosedInterval_<ContainerAllocator>& v)
  {
    s << indent << "minimum: ";
    Printer<double>::stream(s, indent + "  ", v.minimum);
    s << indent << "maximum: ";
    Printer<double>::stream(s, indent + "  ", v.maximum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCR_COMMON_MSGS_MESSAGE_CLOSEDINTERVAL_H
